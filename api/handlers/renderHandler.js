// Render Handler - Handles both fastrack and accurate modes
// Separate proxy handler for render operations

import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function handleRenderFastrack(action, data) {
  console.log('[Render Handler] handleRenderFastrack called with:', { action, dataKeys: Object.keys(data) });
  const { base64Sketch, base64Material, additionalDetails } = data;
  
  if (!base64Sketch) {
    throw new Error('Missing base64Sketch for render fastrack');
  }

  // Get base prompt from environment variable for security
  const basePrompt = process.env.RENDER_FASTRACK_KEY;
  
  console.log('[Render Handler] Environment variable check:');
  console.log('[Render Handler] RENDER_FASTRACK_KEY exists:', !!process.env.RENDER_FASTRACK_KEY);
  console.log('[Render Handler] RENDER_FASTRACK_KEY length:', process.env.RENDER_FASTRACK_KEY?.length || 0);
  console.log('[Render Handler] Received promptText:', additionalDetails);
  console.log('[Render Handler] Is placeholder?', additionalDetails === "RENDER_FASTRACK_PROMPT");
  
  if (!basePrompt) {
    console.error('[Render Handler] ERROR: RENDER_FASTRACK_KEY environment variable is not configured');
    throw new Error('RENDER_FASTRACK_KEY environment variable is not configured');
  }

  // Replace placeholder with actual prompt or use provided prompt
  let finalPromptText = additionalDetails === "RENDER_FASTRACK_PROMPT" ? basePrompt : additionalDetails;
  
  // Log if using environment variable
  if (additionalDetails === "RENDER_FASTRACK_PROMPT") {
    console.log('[Render Handler] Using RENDER_FASTRACK_KEY environment variable for base prompt');
    console.log('[Render Handler] Base prompt preview:', basePrompt?.substring(0, 100) + '...');
    console.log('[Render Handler] Final prompt length:', finalPromptText.length);
    console.log('[Render Handler] Final prompt preview:', finalPromptText?.substring(0, 100) + '...');
  } else {
    console.log('[Render Handler] Using provided prompt text');
  }

  // Clean base64 data
  const cleanBase64 = base64Sketch.replace(/^data:image\/[a-z]+;base64,/, '');
  const cleanMaterialBase64 = base64Material ? base64Material.replace(/^data:image\/[a-z]+;base64,/, '') : null;

  // Get the model
  const model = genAI.getGenerativeModel({ 
    model: "gemini-2.5-flash-image-preview" 
  });

  // Generate content (following old geminiService.ts logic)
  const result = await model.generateContent([
    finalPromptText,
    {
      inlineData: {
        mimeType: "image/png",
        data: cleanBase64
      }
    },
    // Add material image if provided
    ...(cleanMaterialBase64 ? [{
      inlineData: {
        mimeType: "image/png",
        data: cleanMaterialBase64
      }
    }] : [])
  ]);

  const response = await result.response;
  
  // Extract the generated image data
  const generatedImage = response.candidates?.[0]?.content?.parts?.find(
    part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
  );

  if (!generatedImage?.inlineData?.data) {
    throw new Error('No image generated by Gemini API');
  }

  const imageData = generatedImage.inlineData.data;

  // Return in format expected by client
  return {
    success: true,
    mode: "Render Fastrack",
    model_used: "render-ai-v2",
    enhanced_prompt: "Fashion sketch to realistic render",
    output: [{
      type: "image_generation_call",
      result: imageData,
      enhanced_description: "Professional fashion render generated"
    }],
    message: "Fashion render complete",
    imageDimensions: {
      width: 1024,
      height: 1536,
      aspectRatio: 1024 / 1536
    }
  };
}

export async function handleRenderAccurate(action, data) {
  console.log('[Render Handler] handleRenderAccurate called with:', { action, dataKeys: Object.keys(data) });
  const { base64Sketch, base64Material, additionalDetails } = data;
  
  if (!base64Sketch) {
    throw new Error('Missing base64Sketch for render accurate');
  }

  // For accurate mode, use OpenAI (implement as needed)
  // This is a placeholder - implement actual OpenAI call
  throw new Error('Render accurate mode not implemented yet');
}
