// Edit Handler - Handles edit operations (fastrack only)
// Separate proxy handler for edit operations

import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function handleEditFastrack(action, data) {
  console.log('[Edit Handler] handleEditFastrack called with:', { action, dataKeys: Object.keys(data) });
  const { base64Sketch, additionalDetails, renderBox } = data;
  
  if (!base64Sketch) {
    throw new Error('Missing base64Sketch for edit fastrack');
  }

  // Get base prompt from environment variable
  const basePrompt = process.env.EDIT_FASTRACK_KEY;
  
  if (!basePrompt) {
    throw new Error('EDIT_FASTRACK_KEY environment variable is not configured');
  }
  
  // Use environment variable base prompt and append user details if provided
  let finalPromptText = basePrompt;
  
  if (additionalDetails && additionalDetails.trim()) {
    finalPromptText += ` ${additionalDetails.trim()}`;
  }
  
  console.log('[Edit Handler] Final prompt length:', finalPromptText.length);

  // Clean base64 data
  const cleanBase64 = base64Sketch.replace(/^data:image\/[a-z]+;base64,/, '');

  // Get the model
  const model = genAI.getGenerativeModel({ 
    model: "gemini-2.5-flash-image-preview" 
  });

  // Generate content (following old geminiService.ts logic)
  const result = await model.generateContent([
    finalPromptText,
    {
      inlineData: {
        mimeType: "image/png",
        data: cleanBase64
      }
    }
  ]);

  const response = await result.response;
  
  // Extract the generated image data
  const generatedImage = response.candidates?.[0]?.content?.parts?.find(
    part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
  );

  if (!generatedImage?.inlineData?.data) {
    throw new Error('No image generated by Gemini API');
  }

  const imageData = generatedImage.inlineData.data;

  // Calculate aspect ratio from the input bounding box
  const inputAspectRatio = renderBox ? (renderBox.width / renderBox.height) : (1024 / 1536);
  
  // Use a standard width and calculate height to maintain aspect ratio
  const standardWidth = 1024;
  const calculatedHeight = Math.round(standardWidth / inputAspectRatio);
  
  console.log('[Edit Handler] Aspect ratio calculation:', {
    inputBox: renderBox ? { width: renderBox.width, height: renderBox.height } : 'default',
    inputAspectRatio: inputAspectRatio,
    outputDimensions: { width: standardWidth, height: calculatedHeight },
    outputAspectRatio: standardWidth / calculatedHeight
  });

  // Return in format expected by client
  return {
    success: true,
    mode: "Edit Fastrack",
    model_used: "edit-ai-v2",
    enhanced_prompt: additionalDetails && additionalDetails.trim() 
      ? `Edit sketch with requirements: ${additionalDetails.trim()}`
      : "Edit sketch",
    output: [{
      type: "image_generation_call",
      result: imageData,
      enhanced_description: additionalDetails && additionalDetails.trim()
        ? `Edited sketch generated. Custom requirements: ${additionalDetails.trim()}`
        : "Edited sketch generated"
    }],
    message: "Edit complete",
    imageDimensions: {
      width: standardWidth,
      height: calculatedHeight,
      aspectRatio: standardWidth / calculatedHeight
    }
  };
}
