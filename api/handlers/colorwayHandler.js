// Colorway Handler - Handles both color and print modes
// Separate proxy handler for colorway operations

import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

export async function handleColorwayColor(action, data) {
  console.log('[Colorway Handler] handleColorwayColor called with:', { action, dataKeys: Object.keys(data) });
  const { base64Sketch, selectedColor } = data;
  
  if (!base64Sketch || !selectedColor) {
    throw new Error('Missing base64Sketch or selectedColor for colorway color');
  }

  // Get base prompt from environment variable
  const basePrompt = process.env.COLORWAY_COLOR_KEY;
  
  if (!basePrompt) {
    throw new Error('COLORWAY_COLOR_KEY environment variable is not configured');
  }
  
  // Use only the environment variable base prompt (no user details)
  const finalPrompt = basePrompt;
  
  console.log('[Colorway Handler] Using only COLORWAY_COLOR_KEY prompt, length:', finalPrompt.length);

  // Clean base64 data
  const cleanBase64 = base64Sketch.replace(/^data:image\/[a-z]+;base64,/, '');

  // Get the model
  const model = genAI.getGenerativeModel({ 
    model: "gemini-2.5-flash-image-preview" 
  });

  // Generate content
  const result = await model.generateContent([
    finalPrompt,
    {
      inlineData: {
        mimeType: "image/png",
        data: cleanBase64
      }
    }
  ]);

  const response = await result.response;
  
  // Extract the generated image data
  const generatedImage = response.candidates?.[0]?.content?.parts?.find(
    part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
  );

  if (!generatedImage?.inlineData?.data) {
    throw new Error('No image generated by Gemini API');
  }

  const imageData = generatedImage.inlineData.data;

  // Return in format expected by client
  return {
    success: true,
    mode: "Colorway Color",
    model_used: "colorway-ai-v2",
    enhanced_prompt: `Colorway Color generation with color ${selectedColor}`,
    output: [{
      type: "image_generation_call",
      result: imageData,
      enhanced_description: `Professional Colorway Color render generated with color ${selectedColor}`
    }],
    message: "Colorway Color generation complete",
    imageDimensions: {
      width: 1024,
      height: 1536,
      aspectRatio: 1024 / 1536
    }
  };
}

export async function handleColorwayPrint(action, data) {
  console.log('[Colorway Handler] handleColorwayPrint called with:', { action, dataKeys: Object.keys(data) });
  const { base64Sketch, referenceImage } = data;
  
  if (!base64Sketch || !referenceImage) {
    throw new Error('Missing base64Sketch or referenceImage for colorway print');
  }

  // Get base prompt from environment variable
  const basePrompt = process.env.COLORWAY_PRINT_KEY;
  
  if (!basePrompt) {
    throw new Error('COLORWAY_PRINT_KEY environment variable is not configured');
  }
  
  console.log('[Colorway Handler] Final prompt length:', basePrompt.length);

  // Clean base64 data
  const cleanBase64 = base64Sketch.replace(/^data:image\/[a-z]+;base64,/, '');
  const cleanReferenceBase64 = referenceImage.replace(/^data:image\/[a-z]+;base64,/, '');

  // Get the model
  const model = genAI.getGenerativeModel({ 
    model: "gemini-2.5-flash-image-preview" 
  });

  // Generate content with both sketch and reference image
  const result = await model.generateContent([
    basePrompt,
    {
      inlineData: {
        mimeType: "image/png",
        data: cleanBase64
      }
    },
    {
      inlineData: {
        mimeType: "image/png",
        data: cleanReferenceBase64
      }
    }
  ]);

  const response = await result.response;
  
  // Extract the generated image data
  const generatedImage = response.candidates?.[0]?.content?.parts?.find(
    part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
  );

  if (!generatedImage?.inlineData?.data) {
    throw new Error('No image generated by Gemini API');
  }

  const imageData = generatedImage.inlineData.data;

  // Return in format expected by client
  return {
    success: true,
    mode: "Colorway Print",
    model_used: "colorway-ai-v2",
    enhanced_prompt: "Colorway Print generation",
    output: [{
      type: "image_generation_call",
      result: imageData,
      enhanced_description: "Professional Colorway Print render generated"
    }],
    message: "Colorway Print generation complete",
    imageDimensions: {
      width: 1024,
      height: 1536,
      aspectRatio: 1024 / 1536
    }
  };
}
