// Colorway AI service for fashion colorway generation
// Separate calls for color and print modes with different base prompts

import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI - using environment variable from Vite
const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY || '');

// Utility function to get image dimensions from base64 data
const getImageDimensions = (base64Data: string): Promise<{ width: number; height: number }> => {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => {
      resolve({ width: img.naturalWidth, height: img.naturalHeight });
    };
    img.onerror = () => {
      // Fallback to default dimensions if image loading fails
      resolve({ width: 1024, height: 1536 });
    };
    img.src = `data:image/png;base64,${base64Data}`;
  });
};

export interface ColorwayImageResult {
  imageData: string;
  width: number;
  height: number;
  aspectRatio: number;
}

// Color mode: Generate color variations of the garment
export const generateColorwayColor = async (
  imageData: string, 
  selectedColor: string, 
  referenceImage?: string
): Promise<ColorwayImageResult> => {
  console.log('[ColorwayService] generateColorwayColor called with color:', selectedColor);
  console.log('[ColorwayService] Reference image present:', !!referenceImage);
  
  try {
    // Clean base64 data (remove data:image/png;base64, prefix if present)
    const cleanBase64 = imageData.replace(/^data:image\/[a-z]+;base64,/, '');
    
    // Clean reference image data if provided
    const cleanReferenceBase64 = referenceImage ? referenceImage.replace(/^data:image\/[a-z]+;base64,/, '') : null;
    
    // Base prompt for color mode
    let promptText = `Transform this fashion sketch into a photorealistic render with the specified color scheme. Apply the color ${selectedColor} to the garment while maintaining the original design, fabric texture, and silhouette. Ensure the color is applied naturally with proper shading and highlights. Keep the white background.`;
    
    // Add reference image context if provided
    if (cleanReferenceBase64) {
      promptText += ` Use the reference image as a guide for fabric texture and styling details.`;
    }
    
    console.log('[ColorwayService] Final promptText for color mode:', promptText);
    console.log('[ColorwayService] Prompt length:', promptText.length);
    
    // Get the model directly from Gemini SDK
    const model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash-image-preview" 
    });

    // Prepare content array
    const contentArray = [
      promptText,
      {
        inlineData: {
          mimeType: "image/png",
          data: cleanBase64
        }
      }
    ];

    // Add reference image if provided
    if (cleanReferenceBase64) {
      contentArray.push({
        inlineData: {
          mimeType: "image/png",
          data: cleanReferenceBase64
        }
      });
    }

    // Generate content directly using the SDK
    const result = await model.generateContent(contentArray);
    const response = await result.response;
    
    // Extract the generated image data
    const generatedImage = response.candidates?.[0]?.content?.parts?.find(
      part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
    );

    if (!generatedImage?.inlineData?.data) {
      throw new Error('No image generated by Gemini API for colorway color');
    }

    // Get image dimensions by creating a temporary image element
    const dimensions = await getImageDimensions(generatedImage.inlineData.data);
    
    return {
      imageData: generatedImage.inlineData.data,
      width: dimensions.width,
      height: dimensions.height,
      aspectRatio: dimensions.width / dimensions.height
    };
  } catch (error) {
    console.error('Error generating colorway color image:', error);
    throw error;
  }
};

// Print mode: Generate print/pattern variations of the garment
export const generateColorwayPrint = async (
  imageData: string, 
  referenceImage: string
): Promise<ColorwayImageResult> => {
  console.log('[ColorwayService] generateColorwayPrint called');
  console.log('[ColorwayService] Reference image present:', !!referenceImage);
  
  try {
    // Clean base64 data (remove data:image/png;base64, prefix if present)
    const cleanBase64 = imageData.replace(/^data:image\/[a-z]+;base64,/, '');
    
    // Clean reference image data (required for print mode)
    const cleanReferenceBase64 = referenceImage.replace(/^data:image\/[a-z]+;base64,/, '');
    
    // Base prompt for print mode
    const promptText = `Transform this fashion sketch into a photorealistic render by applying the print/pattern from the reference image. Maintain the original garment silhouette and design while accurately transferring the print, texture, and color scheme from the reference. Ensure the print scales appropriately and maintains its visual quality. Keep the white background.`;
    
    console.log('[ColorwayService] Final promptText for print mode:', promptText);
    console.log('[ColorwayService] Prompt length:', promptText.length);
    
    // Get the model directly from Gemini SDK
    const model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash-image-preview" 
    });

    // Generate content with both sketch and reference image
    const result = await model.generateContent([
      promptText,
      {
        inlineData: {
          mimeType: "image/png",
          data: cleanBase64
        }
      },
      {
        inlineData: {
          mimeType: "image/png",
          data: cleanReferenceBase64
        }
      }
    ]);

    const response = await result.response;
    
    // Extract the generated image data
    const generatedImage = response.candidates?.[0]?.content?.parts?.find(
      part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
    );

    if (!generatedImage?.inlineData?.data) {
      throw new Error('No image generated by Gemini API for colorway print');
    }

    // Get image dimensions by creating a temporary image element
    const dimensions = await getImageDimensions(generatedImage.inlineData.data);
    
    return {
      imageData: generatedImage.inlineData.data,
      width: dimensions.width,
      height: dimensions.height,
      aspectRatio: dimensions.width / dimensions.height
    };
  } catch (error) {
    console.error('Error generating colorway print image:', error);
    throw error;
  }
};

/**
 * Transform colorway response to match the existing render API format
 * This ensures compatibility with the current render system
 */
export const transformColorwayResponse = (
  colorwayResult: ColorwayImageResult, 
  mode: 'color' | 'print',
  selectedColor?: string
) => {
  const modeLabel = mode === 'color' ? 'Colorway Color' : 'Colorway Print';
  const colorInfo = mode === 'color' && selectedColor ? ` with color ${selectedColor}` : '';
  
  return {
    success: true,
    mode: modeLabel,
    model_used: "gemini-2.5-flash-image-preview",
    enhanced_prompt: `${modeLabel} generation${colorInfo}`,
    output: [{
      type: "image_generation_call",
      result: colorwayResult.imageData,
      enhanced_description: `Professional ${modeLabel} render generated by Gemini 2.5 Flash${colorInfo}`
    }],
    message: `${modeLabel} generation complete using Gemini 2.5 Flash`,
    // Include dimension information for aspect ratio handling
    imageDimensions: {
      width: colorwayResult.width,
      height: colorwayResult.height,
      aspectRatio: colorwayResult.aspectRatio
    }
  };
};
