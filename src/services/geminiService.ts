// Following the referenced GitHub repository structure for services
// Completely frontend implementation using Gemini SDK directly

import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI - using environment variable from Vite
const genAI = new GoogleGenerativeAI(import.meta.env.VITE_GEMINI_API_KEY || '');

// Utility function to get image dimensions from base64 data
const getImageDimensions = (base64Data: string): Promise<{ width: number; height: number }> => {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => {
      resolve({ width: img.naturalWidth, height: img.naturalHeight });
    };
    img.onerror = () => {
      // Fallback to default dimensions if image loading fails
      resolve({ width: 1024, height: 1536 });
    };
    img.src = `data:image/png;base64,${base64Data}`;
  });
};

export interface GeminiImageResult {
  imageData: string;
  width: number;
  height: number;
  aspectRatio: number;
}

export const generateImage = async (imageData: string, materialImage?: string, additionalDetails?: string): Promise<GeminiImageResult> => {
  console.log('[GeminiService] generateImage called with additionalDetails:', additionalDetails);
  console.log('[GeminiService] additionalDetails type:', typeof additionalDetails);
  console.log('[GeminiService] additionalDetails value:', additionalDetails);
  console.log('[GeminiService] additionalDetails trimmed:', additionalDetails?.trim());
  
  try {
    // Clean base64 data (remove data:image/png;base64, prefix if present)
    const cleanBase64 = imageData.replace(/^data:image\/[a-z]+;base64,/, '');
    
    // Clean material image data if provided
    const cleanMaterialBase64 = materialImage ? materialImage.replace(/^data:image\/[a-z]+;base64,/, '') : null;
    
    // Create a concise prompt for fashion sketch to photorealistic render
    let promptText = `Make this sketch photorealistic from fashion point of view. Enhance fabric fall as per garment requirement. Make sure fabric color, print, scale is accurately same as per sketch. If Material reference attached, replace overall garment fabric as per material reference and scale it as per requirement.`;

    // Add additional details if provided by the user
    if (additionalDetails && additionalDetails.trim()) {
      promptText += `\n\nAdditional User Requirements: ${additionalDetails.trim()}`;
    }
    
    console.log('[GeminiService] Final promptText:', promptText);
    console.log('[GeminiService] Prompt length:', promptText.length);
    
    // Get the model directly from Gemini SDK
    const model = genAI.getGenerativeModel({ 
      model: "gemini-2.5-flash-image-preview" 
    });

    // Generate content directly using the SDK
    const result = await model.generateContent([
      promptText,
      {
        inlineData: {
          mimeType: "image/png",
          data: cleanBase64
        }
      },
      // Add material image if provided
      ...(cleanMaterialBase64 ? [{
        inlineData: {
          mimeType: "image/png",
          data: cleanMaterialBase64
        }
      }] : [])
    ]);

    const response = await result.response;
    
    // Extract the generated image data
    const generatedImage = response.candidates?.[0]?.content?.parts?.find(
      part => part.inlineData && part.inlineData.mimeType?.startsWith('image/')
    );

    if (!generatedImage?.inlineData?.data) {
      throw new Error('No image generated by Gemini API');
    }

    // Get image dimensions by creating a temporary image element
    const dimensions = await getImageDimensions(generatedImage.inlineData.data);
    
    return {
      imageData: generatedImage.inlineData.data,
      width: dimensions.width,
      height: dimensions.height,
      aspectRatio: dimensions.width / dimensions.height
    };
  } catch (error) {
    console.error('Error generating image:', error);
    throw error;
  }
};

/**
 * Transform Gemini response to match the existing render API format
 * This ensures compatibility with the current render system
 */
export const transformGeminiResponse = (geminiResult: GeminiImageResult, additionalDetails?: string) => {
  return {
    success: true,
    mode: "fastrack",
    model_used: "gemini-2.5-flash-image-preview",
    enhanced_prompt: additionalDetails && additionalDetails.trim() 
      ? `Fashion sketch to realistic render with detailed specifications. Additional requirements: ${additionalDetails.trim()}`
      : "Fashion sketch to realistic render with detailed specifications",
    output: [{
      type: "image_generation_call",
      result: geminiResult.imageData,
      enhanced_description: additionalDetails && additionalDetails.trim()
        ? `Professional fashion render generated by Gemini 2.5 Flash with material reference support. Custom requirements: ${additionalDetails.trim()}`
        : "Professional fashion render generated by Gemini 2.5 Flash with material reference support"
    }],
    message: "Fashion render complete using Gemini 2.5 Flash",
    // Include dimension information for aspect ratio handling
    imageDimensions: {
      width: geminiResult.width,
      height: geminiResult.height,
      aspectRatio: geminiResult.aspectRatio
    }
  };
};
